"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var notification = function notification() {
  var showBtn = document.querySelectorAll('.show-notification');
  var notifications = document.querySelectorAll('.notification');
  showBtn.forEach(function (e) {
    e.addEventListener('click', function () {
      notifications.forEach(function (e) {
        e.classList.add('active');
      });
    });
  });
};

var select = function select() {
  var current = document.querySelectorAll('.select__current');
  current.forEach(function (e) {
    e.addEventListener('click', function () {
      e.closest('.select').classList.toggle('active');
    });
  });
};

var faq = function faq() {
  var current = document.querySelectorAll('.faq__header-btn');
  current.forEach(function (e) {
    e.addEventListener('click', function () {
      e.closest('.faq').classList.toggle('active');
    });
  });
};

var Slider = /*#__PURE__*/function () {
  function Slider(rangeElements) {
    var _this = this;

    _classCallCheck(this, Slider);

    this.rangeElements = rangeElements; // Attach a listener to "change" event

    this.rangeElements.forEach(function (e) {
      e.addEventListener('input', _this.updateSlider.bind(_this));
    });
  } // Initialize the slider


  _createClass(Slider, [{
    key: "init",
    value: function init() {
      this.updateSlider();
    }
  }, {
    key: "generateBackground",
    value: function generateBackground(value, min, max) {
      var percentage = (value - min) / (max - min) * 100;
      return "linear-gradient(to right, #00da83, #00da83 ".concat(percentage, "%, #E6E8EC ").concat(percentage, "%, #E6E8EC 100%)");
    }
  }, {
    key: "updateSlider",
    value: function updateSlider(newValue) {
      var _this2 = this;

      this.rangeElements.forEach(function (e) {
        e.style.background = _this2.generateBackground(e.value, e.min, e.max);
      });
    }
  }]);

  return Slider;
}();

var rangeElements = document.querySelectorAll('.range-slider__range');

if (rangeElements) {
  var slider = new Slider(rangeElements);
  slider.init();
}

var sandwich = function sandwich() {
  var openBtn = document.querySelector('.sandwich__open-btn');
  var closeBtn = document.querySelector('.sandwich__close-btn');
  var wrapper = document.querySelector('.sandwich__main');
  var menu = document.querySelector('.sandwich__content');
  openBtn.addEventListener('click', function () {
    wrapper.classList.add('sandwich__main--active');
    menu.classList.add('sandwich__content--active');
  });
  closeBtn.addEventListener('click', function () {
    wrapper.classList.remove('sandwich__main--active');
    menu.classList.remove('sandwich__content--active');
  });
  wrapper.addEventListener('click', function (e) {
    if (e.target.dataset.sandwich === 'wrapper') {
      wrapper.classList.remove('sandwich__main--active');
      menu.classList.remove('sandwich__content--active');
    }
  });
};

(function () {
  // breakpoint where swiper will be destroyed
  // and switches to a dual-column layout
  var breakpoint = window.matchMedia('(min-width: 769px)'); // keep track of swiper instances to destroy later

  var mySwiper;

  var breakpointChecker = function breakpointChecker() {
    // if larger viewport and multi-row layout needed
    if (breakpoint.matches === true) {
      // clean up old instances and inline styles when available
      if (mySwiper !== undefined) mySwiper.destroy(true, true); // or/and do nothing
      // else if a small viewport and single column layout needed
    } else if (breakpoint.matches === false) {
      // fire small viewport version of swiper
      return sliderAdvantages();
    }
  };

  if (window.innerWidth <= 320 && mySwiper) {
    mySwiper.destroy(false);
  }

  var sliderAdvantages = function sliderAdvantages() {
    mySwiper = new Swiper('.stats-panel__container', {
      spaceBetween: 16,
      loop: true,
      slidesPerView: 1,
      breakpoints: {
        420: {
          slidesPerView: 2
        },
        660: {
          slidesPerView: 3
        }
      }
    });
  }; // keep an eye on viewport size changes


  breakpoint.addListener(breakpointChecker); // kickstart

  breakpointChecker();
})();

var marketMobile = function marketMobile() {
  var btn = document.querySelectorAll('.market-nav-mobile__btn');
  var tradeBlock = document.querySelector('.trade-form-box');
  var wrapper = document.querySelector('.market-trade-outer');

  if (btn) {
    btn.forEach(function (el) {
      el.addEventListener('click', function () {
        tradeBlock.classList.add('trade-form-box--opened');
        wrapper.classList.add('market-trade-outer--active');
      });
    });
  }

  if (wrapper) {
    wrapper.addEventListener('click', function () {
      tradeBlock.classList.remove('trade-form-box--opened');
      wrapper.classList.remove('market-trade-outer--active');
    });
  }
};

var tableDropdownRows = function tableDropdownRows() {
  var btn = document.querySelectorAll('.td--dropdown');
  btn.forEach(function (el) {
    el.addEventListener('click', function (evt) {
      evt.currentTarget.classList.toggle('td--dropdown-active');
      evt.currentTarget.closest('.tr').querySelectorAll('.td--full').forEach(function (elInner) {
        elInner.classList.toggle('td--full-active');
      });
    });
  });
};

sandwich();
notification();
select();
faq();
marketMobile();
tableDropdownRows();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
